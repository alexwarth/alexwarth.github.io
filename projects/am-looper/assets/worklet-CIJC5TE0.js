(function(){"use strict";function l(o){if(o.length===0)return null;let e=o[0].lengthInFrames;for(let s of o)e=Math.max(e,s.lengthInFrames);return e}const d=1e6*128;class c extends AudioWorkletProcessor{constructor(){super(),this.samplesByLayerId=new Map,this.layers=[],this.recordingLayer=null,this.playhead=0,this.latencyOffsetInChunks=0,this.lastTimePlayheadMovedSent=0,this.port.onmessage=e=>this.onMessage(e.data)}sendMessage(e,s=[]){this.port.postMessage(e,s)}say(e){this.sendMessage({event:"debug",payload:e})}onMessage(e){switch(e.command){case"set latency offset":this.setLatencyOffset(e.value);break;case"change latency offset":this.setLatencyOffset(this.latencyOffsetInChunks+e.by);break;case"start recording":this.startRecording();break;case"stop recording":this.stopRecording();break;case"update layers":this.updateLayers(e.layers);break;case"set layer samples":this.setLayerSamples(e.id,new Float32Array(e.samples));break;default:throw console.error("unsupported message",e),new Error("unsupported message!")}}setLatencyOffset(e){this.latencyOffsetInChunks=e,this.sendMessage({event:"changed latency offset",value:this.latencyOffsetInChunks})}startRecording(){this.recordingLayer||(this.recordingLayer={id:Math.random(),lengthInFrames:l(this.layers)??-1,frameOffset:this.playhead-this.latencyOffsetInChunks*128,numChannels:1,numFramesRecorded:0,soloed:!1,muted:!1,gain:1},this.samplesByLayerId.set(this.recordingLayer.id,new Float32Array(d)),this.say("started recording"))}stopRecording(){if(!this.recordingLayer)return;this.recordingLayer.lengthInFrames<0&&(this.recordingLayer.lengthInFrames=this.recordingLayer.numFramesRecorded),this.layers.length===0&&this.movePlayhead(this.latencyOffsetInChunks*128);const e=this.samplesByLayerId.get(this.recordingLayer.id).slice(0,this.recordingLayer.numFramesRecorded*this.recordingLayer.numChannels).buffer;this.sendMessage({event:"finished recording",layer:this.recordingLayer,samples:e},[e]),this.layers.push(this.recordingLayer),this.recordingLayer=null}updateLayers(e){console.log("update layers"),this.layers=e}setLayerSamples(e,s){console.log("set layer samples"),this.samplesByLayerId.set(e,s)}process(e,[s],n){const a=e[0],t=s[0].length,h=!this.layers.some(r=>r.soloed);for(let r=0;r<t;r++){if(this.recordingLayer){h&&this.mixFrameInto(this.recordingLayer,s,r);try{this.recordFrame(a,r)}catch(i){throw console.log("--- ⬇️⬇️⬇️ ---"),console.log(i),console.log("inputs",e),console.log("--- ⬆️⬆️⬆️ ---"),i}}for(const i of this.layers)(i.soloed||!i.muted&&h)&&this.mixFrameInto(i,s,r);this.advancePlayhead()}return!0}mixFrameInto(e,s,n){if(e.lengthInFrames<0)return;const a=this.playhead%e.lengthInFrames;for(let t=0;t<s.length;t++)s[t][n]+=e.gain*this.getSampleAt(e,t,a)}getSampleAt(e,s,n){if(e.numChannels===1)s=0;else if(e.numChannels<=s)return 0;let a=0,t=(n-e.frameOffset)*e.numChannels+s;const h=e.numFramesRecorded*e.numChannels,r=this.samplesByLayerId.get(e.id);if(!r)return 0;for(;t<h;)t>=0&&(a+=r[t]),t+=e.lengthInFrames*e.numChannels;return a}recordFrame(e,s){if(!this.recordingLayer)throw new Error("called recordFrame() when recordingLayer was null!");if(e.length<this.recordingLayer.numChannels)throw new Error(`recording ${this.recordingLayer.numChannels}-channel layer from ${e.length}-channel input`);let n=this.recordingLayer.numFramesRecorded++*this.recordingLayer.numChannels;const a=this.samplesByLayerId.get(this.recordingLayer.id);for(let t=0;t<this.recordingLayer.numChannels;t++)a[n++]=e[t][s]}advancePlayhead(){const e=l(this.layers);this.movePlayhead(e===null?0:(this.playhead+1)%e)}movePlayhead(e){this.playhead=e;const s=Date.now();(this.playhead===0||s-this.lastTimePlayheadMovedSent>16)&&(this.sendMessage({event:"playhead moved",value:this.playhead}),this.lastTimePlayheadMovedSent=s)}}registerProcessor("looper",c)})();
